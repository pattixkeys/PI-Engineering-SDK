<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- InstanceBegin template="/Templates/template.dwt" codeOutsideHTMLIsLocked="false" -->
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!-- InstanceBeginEditable name="doctitle" -->
    <title>SetErrorCallback()</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
    <link href="help.css" rel="stylesheet" type="text/css" />
  </head>

  <body>
    <div id="page">
      <a class="anchor" name="top"></a>
      <div id="banner">
        <h1>P.I. Engineering SDK Documentation</h1>
      </div><!-- end of "banner" -->
      
  <div id="main"> <!-- InstanceBeginEditable name="MainContent" --> 
    <h2><a name="idh_setdatacallback" id="idh_setdatacallback"></a>SetErrorCallback()<b> 
      | <a href="../index.htm">Main Page</a></b></h2>
        
    <h3>Overview</h3>
    <p>Call this function to setup error notification for an application.</p>
        <div id="page">
      <div id="main">
        .NET Framework Class Library 
        <h3>PIEDevice.SetErrorCallback()</h3>
        Namespace: PIEHid32Net<br>
        Assembly: PIEHid32Net.dll<br>
        <h4>Syntax</h4>
        <p>C#</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>public int SetErrorCallback(PIEHid32Net.PIEErrorHandler handler)</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Declaration)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>Public Function SetErrorCallback(ByVal handler As PIEHid32Net.PIEErrorHandler) 
            As Integer</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Usage)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>devices(selecteddevice).SetErrorCallback(Me) </p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Examples</h4>
        <pre>C#


public partial class Form1 : Form, PIEDataHandler, PIEErrorHandler  //add PIEDataHandler to main form
{
	// This delegate enables asynchronous calls for setting
	// the text property on a TextBox control.
	delegate void SetTextCallback(string text);
	Control c;
	....


	//assuming devices have been enumerated, setup for callbacks


	private void BtnCallback_Click(object sender, EventArgs e)
	{
		//setup callback if there are devices found for each device found
		devices[selecteddevice].SetErrorCallback(this);
	}
	
	public void HandlePIEHidError(PIEDevice sourceDevice, Int32 error)
    {
        String errorstring = sourceDevice.GetErrorString(error);
        this.SetToolStrip("Error: " + error.ToString() + &quot; &quot; + errorstring);
    }

	//for threadsafe setting of Windows Forms control
    private void SetToolStrip(string text)
    {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (this.statusStrip1.InvokeRequired)
            {
                SetTextCallback d = new SetTextCallback(SetToolStrip);
                this.Invoke(d, new object[] { text });
            }
            else
            {
                this.toolStripStatusLabel1.Text = text;
            }
    }
	... 
}

</pre>
        <br>
        <pre>Visual Basic


Implements PIEHid32Net.PIEDataHandler
Implements PIEHid32Net.PIEErrorHandler
Dim devices() As PIEHid32Net.PIEDevice
Dim c As Control
Delegate Sub SetTextCallback(ByVal [text] As String)


'assuming devices have been enumerated, setup for callbacks


Private Sub BtnCallback_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnCallback.Click
	'setup selected device for data and error callbacks
	devices(selecteddevice).SetDataCallback(Me, PIEHidDotNet.DataCallbackFilterType.callOnChangedData)
	devices(selecteddevice).SetErrorCallback(Me)

End Sub


Public Sub HandlePIEHidError(ByVal sourceDevice As PIEHid32Net.PIEDevice, ByVal perror As Integer) Implements PIEHid32Net.PIEErrorHandler.HandlePIEHidError
    'error callback
	Dim output As String
 	output = "Error: " + perror.ToString + " " + sourceDevice.GetErrorString(perror)
 	c = LblStatus 'LblStatus is a label on the form
 	SetText(output)
	Beep()
End Sub

Public Sub SetText(ByVal [text] As String)

    ' InvokeRequired required compares the thread ID of the
    ' calling thread to the thread ID of the creating thread.
    ' If these threads are different, it returns true.
    If Me.c.InvokeRequired Then
        Dim d As New SetTextCallback(AddressOf SetText)
        Me.Invoke(d, New Object() {[text]})
    Else
        Me.c.Text = text
    End If
End Sub

</pre>
        <p>&nbsp;</p>
        <p>Unmanaged DLL</p>
        <h3>SetErrorCallback Function </h3>
        <h4>Syntax</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>DWORD __stdcall <strong>SetErrorCallback</strong>(long hnd, PHIDDataEvent 
            pErrorCall);</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Parameters</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>hnd [in]. Handle to desired device, obtained from the <a href="enumeratepie.htm">EnumeratePIE()</a> 
            call.</p>
          </div>
      </div>
      <blockquote>
        
      </blockquote>
      <div id="page"> 
        <div id="main"> 
          <p>pErrorCall [in]. The function that the user wants to have called 
            when an error occurs. The function pointer is defined by:</p>
          <blockquote> 
            <p>typedef DWORD (__stdcall *PHIDErrorEvent)(long status);</p>
          </blockquote>
        </div>
      </div>
      <div id="page"></div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Return Value</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">0 if successful; otherwise an error code, see <a href="PIEHidErrors.htm">PIEHid32 
          Errors</a>. </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Example</h4>
        <pre>C++


DWORD __stdcall HandleErrorEvent(DWORD deviceID, DWORD status);



void FindAndStart(HWND hDialog)
{

	DWORD result;
	...

	//assuming devices have been enumerated, setup for callbacks
	result = SetErrorCallback(hDevice, HandleErrorEvent);
	if (result != 0)    
	{
		//Error setting callback
	}
}


DWORD __stdcall HandleErrorEvent(DWORD deviceID, DWORD status)
{
	//handle error here

	if (status==307)
	{
		CleanupInterface(hDevice);
		MessageBeep(MB_ICONHAND);
		AddEventMsg(hDialog, "Device Disconnected");		
	}
	return TRUE;
}    
      </pre>
        <h4>Remarks</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">There is no need to use the <a href="SetErrorCallback.htm">SetErrorCallback()</a> 
          if using the <a href="SetDataCallback.htm">SetDataCallback()</a> functions 
          since the parameter error is included in this call. </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Function Information</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">Minimum DLL Version: PIEHid32.dll<br>
          Header: PIEHid32.h<br>
          Import Library: PIEHid32.lib</div>
      </div>
    </blockquote>
    
    <!-- InstanceEndEditable --> <a class="backtotop" href="#top">Back to top</a><a href="index.htm"> 
    </a> </div>
  <!-- end of "main" -->
      <div id="footer">
        
    <p>&copy; Copyright 2018&emsp;|&emsp;<a href="http://www.piengineering.com" rel="external" target="_blank">P.I. 
      Engineering, Inc.</a>&emsp;|&emsp;Select Rights Reserved</p>
      </div>
      <!-- end of "footer" -->
    </div><!-- end of "page" -->
  </body>
<!-- InstanceEnd --></html>