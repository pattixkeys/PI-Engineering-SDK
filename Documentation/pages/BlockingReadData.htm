<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- InstanceBegin template="/Templates/template.dwt" codeOutsideHTMLIsLocked="false" -->
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!-- InstanceBeginEditable name="doctitle" -->
      <title>BlockingReadData()</title>
    <!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
    <!-- InstanceEndEditable -->
    <link href="help.css" rel="stylesheet" type="text/css" />
  </head>

  <body>
    <div id="page">
      <a class="anchor" name="top"></a>
      <div id="banner">
        <h1>P.I. Engineering SDK Documentation</h1>
      </div><!-- end of "banner" -->
      <div id="main">
<!-- InstanceBeginEditable name="MainContent" -->
        
    <h2><a name="idh_enumerate" id="idh_enumerate"></a>BlockingReadData() | <a href="../index.htm">Main Page</a> </h2>
        
    <h3>Overview</h3>
    <p>If there is no queued data available, this call will wait up to maxMillis milliseconds for data to arrive. An  error status of 304 is returned if there is no data appearing in the buffer within the time specified.</p>
        
    <p>Using this call improves the process of waiting to get a specific report 
      back after, for example, sending a Descriptor output report. </p>
        
    <p>If this function call returns a data packet, then the packet is removed 
      from the front of the ring buffer, so that the next call will return the 
      next packet.</p>
    <div id="page">
      <div id="main">
        <p>.NET Framework Class Library </p>
        <h3>PIEDevice.BlockingReadData()</h3>
        Namespace: PIEHid32Net<br>
        Assembly: PIEHid32Net.dll<br>
        <h4>Syntax</h4>
        <p>C#</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">public int BlockingReadData(ref byte[] dest, int maxMillis);</div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Declaration)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>Public Function BlockingReadData(ByRef dest() As Byte, ByVal maxMillis 
            As Integer) As Integer</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Usage)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>Dim keydata(devices(selecteddevice).ReadLength) As Byte<br>
            devices(selecteddevice).BlockingReadData(keydata, 100)</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Examples</h4>
        <pre>C#



<font color="#000000">int selecteddevice=-1;
PIEDevice</font>[] devices;	
//from enumerate code, need handle to a device
devices = PIEHid32Net.<font color="#000000">PIEDevice</font>.EnumeratePIE();
//use first device found on hid usage page 0xc
for (int i = 0; i < devices.Length; i++)
{
	if (devices[i].HidUsagePage == 0xc)
	{
		selecteddevice=i;
		break;
	}
}

private void BtnCheckKey_Click(object sender, EventArgs e)
{
	byte[] data =null;
	int countout = 0;
	int ret = devices[selecteddevice].BlockingReadData(ref data, 100);
	while ((ret == 0 && data[0] != 3) || ret == 304) //in this example looking for an input report with 3 in the first byte
	{
		if (ret == 304)
		{
			// Didn't get any data for 100ms, increment the countout extra
			countout += 100;
		}
		countout++;
		if (countout > 500) //increase this if have to check more than once
			break;
		ret = devices[selecteddevice].BlockingReadData(ref data, 100);
	}
}</pre>
        <p>&nbsp;</p><pre>Visual Basic


Dim selecteddevice As Integer
selecteddevice=-1
Dim devices() As PIEHid32Net.PIEDevice
'from enumerate code, need handle to a device
devices = PIEHid32Net.PIEDevice.EnumeratePIE()
'use first device found on hid usage page 12
For i As Integer = 0 To devices.Length - 1
	If devices(i).HidUsagePage = 12 Then

		selecteddevice=i
		Exit For
	End If

Next


Private Sub BtnCheckKey_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnCheckKey.Click
   
	Dim keydata(devices(selecteddevice).ReadLength) As Byte
	Dim countout As Integer = 0
	result = devices(selecteddevice).BlockingReadData(keydata, 100)
	While (result = 304 Or (result = 0 And keydata(0) <> 3)) 'in this example looking for an input report with 3 in the first byte
		If result = 304 Then
			'no new data after 100ms, so increment countout extra
			countout = countout + 99
		End If
		countout = countout + 1
		If (countout > 500) Then
			Exit While
		End If
		result = devices(selecteddevice).BlockingReadData(keydata, 100)

	End While
End Sub</pre>
        <p>&nbsp;</p>
        <p>Unmanaged DLL</p>
        <h3>BlockingReadData Function </h3>
        <h4>Syntax</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">DWORD __stdcall <strong>BlockingReadData</strong>(long 
          hnd, UCHAR *data, int maxMillis);</div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Parameters</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> data [out] Input report, see Data Reports for desired 
          device. </div>
      </div>
      <div id="page"></div>
      <div id="page"> 
        <div id="main">maxMillis [in] Amount of time in milliseconds to wait for 
          data to arrive. </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Return Value</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">0 if successful; otherwise an error code, see <a href="PIEHidErrors.htm">PIEHid32 
          Errors</a>.</div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Example</h4>
        <pre>C++


BYTE buffer[80];
long hDevice = -1; //get handle hDevice from enumerate code


DisableDataCallback(hDevice, true); //turn off callback so capture data here

for (int i=0;i&lt;wlen;i++)
{
	buffer[i]=0;

}
buffer[0]=0;
buffer[1]=214;
result = WriteData(hDevice, buffer);

//after this write the next read 3rd byte=214 will give descriptor information
for (int i=0;i&lt;80;i++){buffer[i]=0;}
result=BlockingReadData(hDevice, buffer, 100);

			
while (result == 304 || (result == 0 && buffer[2] != 214))
{
	if (result == 304)
	{
			// No data received after 100ms, so increment countout extra
			countout += 99;
	}
	countout++;
	if (countout > 1000) //increase this if have to check more than once
		break;
	result = BlockingReadData(hDevice, buffer, 100);
}

if (result==0 &amp;&amp; buffer[2]==214)
{
	//the descriptor data is in buffer<br>}</pre>
      </div>
    </div>
    <blockquote>
      <div id="page"></div>
    </blockquote>
    <div id="page"> 
      <div id="main">
        <h4>Function Information</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">Minimum DLL Version: PIEHid32.dll <br>
          Header: PIEHid32.h <br>
          Import Library: PIEHid32.lib</div>
      </div>
    </blockquote>
   
    <!-- InstanceEndEditable --> <a class="backtotop" href="#top">Back to top</a><a href="index.htm"> 
    </a> </div>
  <!-- end of "main" -->
      <div id="footer">
        
    <p>&copy; Copyright 2018&emsp;|&emsp;<a href="http://www.piengineering.com" rel="external" target="_blank">P.I. 
      Engineering, Inc.</a>&emsp;|&emsp;Select Rights Reserved</p>
      </div>
      <!-- end of "footer" -->
    </div><!-- end of "page" -->
  </body>
<!-- InstanceEnd --></html>