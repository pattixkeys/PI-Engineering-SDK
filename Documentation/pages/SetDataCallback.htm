<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><!-- InstanceBegin template="/Templates/template.dwt" codeOutsideHTMLIsLocked="false" -->
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!-- InstanceBeginEditable name="doctitle" -->
    <title>SetDataCallback()</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
    <link href="help.css" rel="stylesheet" type="text/css" />
  </head>

  <body>
<div id="page"> <a class="anchor" name="top"></a> 
  <div id="banner">
        <h1>P.I. Engineering SDK Documentation</h1>
      </div><!-- end of "banner" --> 
  <div id="main"> <!-- InstanceBeginEditable name="MainContent" --> 
    <h2><a name="idh_setdatacallback" id="idh_setdatacallback"></a>SetDataCallback()<b> 
      | <a href="../index.htm">Main Page</a></b></h2>
    <h3>Overview</h3>
    <p>Call this function to receive an event notification for an application 
      when data from the device has changed.</p>
    <div id="page"> 
      <div id="main"> 
        <p>.NET Framework Class Library </p>
        <h3>PIEDevice.SetDataCallback()</h3>
        Namespace: PIEHid32Net<br>
        Assembly: PIEHid32Net.dll<br>
        <h4>Syntax</h4>
        <p>C#</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>public int SetDataCallback(PIEHid32Net.PIEDataHandler handler)</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Declaration)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>Public Function SetDataCallback(ByVal handler As PIEHid32Net.PIEDataHandler) 
            As Integer</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <p>Visual Basic (Usage)</p>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>devices(i).SetDataCallback(Me)</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Examples</h4>
        <pre>C#


public partial class Form1 : Form, PIEDataHandler, PIEErrorHandler  //add PIEDataHandler to main form
{
	// This delegate enables asynchronous calls for setting
	// the text property on a TextBox control.
	delegate void SetTextCallback(string text);
	Control c;
	....


	//assuming devices have been enumerated, setup for callbacks


	private void BtnCallback_Click(object sender, EventArgs e)
	{
		//setup callback if there are devices found for each device found
		devices[selecteddevice].SetErrorCallback(this);
        devices[selecteddevice].SetDataCallback(this);
        devices[selecteddevice].callNever = false;		
	}
	
	public void HandlePIEHidData(Byte[] data, PIEDevice sourceDevice, int error)
	{
		//handle data here
		if (sourceDevice == devices[selecteddevice])
		{
			String output = "Callback: " + sourceDevice.Pid + ", ID: " + selecteddevice.ToString() + ", data=";
			for (int i = 0; i < sourceDevice.ReadLength; i++)
			{
				output = output + data[i].ToString() + " "; 
			}
			c=this.LblStatus;  //LblStatus is a label on the form
			this.SetText(output);
		}
	}

	private void SetText(string text)
	{
		// InvokeRequired required compares the thread ID of the
		// calling thread to the thread ID of the creating thread.
		// If these threads are different, it returns true.
		if (this.c.InvokeRequired)
		{
			SetTextCallback d = new SetTextCallback(SetText);
			this.Invoke(d, new object[] { text });
		}
		else
		{
			this.c.Text = text;
		}
	}  
	... 
}

</pre>
        <br>
        <pre>Visual Basic using PIEHid32Net.dll


Implements PIEHid32Net.PIEDataHandler
Implements PIEHid32Net.PIEErrorHandler
Dim devices() As PIEHid32Net.PIEDevice
Dim c As Control
Delegate Sub SetTextCallback(ByVal [text] As String)


'assuming devices have been enumerated, setup for callbacks


Private Sub BtnCallback_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnCallback.Click
	'setup selected device for data and error callbacks
	devices(selecteddevice).SetDataCallback(Me)
	devices(selecteddevice).SetErrorCallback(Me)

End Sub


Public Sub HandlePIEHidData(ByVal data() As Byte, ByVal sourceDevice As PIEHid32Net.PIEDevice, ByVal perror As Integer) Implements PIEHid32Net.PIEDataHandler.HandlePIEHidData
	'handle data here
	If sourceDevice.Pid = devices(selecteddevice).Pid Then
		Dim output As String
        output = "Callback: " + sourceDevice.Pid.ToString + ", ID: " + selecteddevice.ToString + ", data="
        For i As Integer = 1 To sourceDevice.ReadLength-1
        	output = output + data(i).ToString + " "
        Next
		c = LblStatus 'LblStatus is a label on the form
 		SetText(output)
	End If
End Sub

Public Sub SetText(ByVal [text] As String)
	' InvokeRequired required compares the thread ID of the
	' calling thread to the thread ID of the creating thread.
	' If these threads are different, it returns true.
	If Me.c.InvokeRequired Then
		Dim d As New SetTextCallback(AddressOf SetText)
		Me.Invoke(d, New Object() {[text]})
	Else
		Me.c.Text = text
	End If
End Sub

</pre>
        <p>&nbsp;</p>
        <p>Unmanaged DLL</p>
        <h3>SetDataCallback Function </h3>
        <h4>Syntax</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>DWORD __stdcall SetDataCallback(long hnd, PHIDDataEvent pDataEvent)</p>
          <p>or</p>
          <p>DWORD __stdcall <b>SetDataCallback</b>(long hnd, int eventType, PHIDDataEvent 
            pDataEvent)</p>
        </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Parameters</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main"> 
          <p>hnd [in]. Handle to desired device, obtained from the <a href="enumeratepie.htm">EnumeratePIE()</a> 
            call.</p>
          <p>eventType [in] PIEHid.dll only. Indicates how the user would like 
            callback notification, the following are valid values:</p>
        </div>
      </div>
      <blockquote>
        <div id="page">
          <div id="main">
            <p>typedef enum {<br />
              &nbsp;&nbsp;&nbsp;piNone = 0,<br />
              &nbsp;&nbsp;&nbsp;piNewData = 1,<br />
              &nbsp;&nbsp;&nbsp;piDataChange = 2<br />
              } EEventPI;</p>
            <p> Use eventType=piNone for no callback ever, eventType=piNewData 
              for notification every time new data is received and eventType=piDataChange 
              for notification every time the data is changed. </p>
          </div>
        </div>
      </blockquote>
      <div id="page">
        <div id="main">
          <p>pDataEvent [in]. The function that the user wants to have called 
            when an event occurs. The function pointer is defined by:</p>
          <blockquote> 
            <p>typedef DWORD (__stdcall *PHIDDataEvent)(UCHAR *pData, DWORD deviceID, 
              DWORD error);</p>
          </blockquote>
        </div>
      </div>
      <div id="page"></div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Return Value</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">0 if successful; otherwise an error code, see <a href="PIEHidErrors.htm">PIEHid32 
          Errors</a>. </div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Example</h4>
        <pre>C++




DWORD __stdcall HandleDataEvent(UCHAR *pData, DWORD deviceID, DWORD error);


void FindAndStart(HWND hDialog)
{

	DWORD result;
	...

	//assuming devices have been enumerated, setup for callbacks
	result = SetDataCallback(hDevice, HandleDataEvent);
	if (result != 0)    
	{
		//Error setting callback
	}
}


DWORD __stdcall HandleDataEvent(UCHAR *pData, DWORD deviceID, DWORD error)
{
	//handle data here
	char dataStr[256];
	sprintf(dataStr, "%02x %02x %02x %02x -- %02x %02x %02x\n", 
	pData[0], pData[1], pData[2], pData[3], pData[4], pData[5], pData[6]);
	AddEventMsg(hDialog, dataStr);
	//error handling
	if (error==307)
	{
		CleanupInterface(hDevice);
		MessageBeep(MB_ICONHAND);
		AddEventMsg(hDialog, "Device Disconnected");		
	}
	return TRUE;
} 
   </pre>
        <h4>Remarks</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">There is no need to use the <a href="SetErrorCallback.htm">SetErrorCallback()</a> 
          if this function is employed since the parameter error is included in 
          this call. <b>SetDataCallback()</b> omits the report ID (first byte 
          of data packet). To receive the report ID use <a href="SetCallbackEx.htm">SetCallbackEx()</a> 
          and set the skipReportID parameter to false.</div>
      </div>
    </blockquote>
    <div id="page"> 
      <div id="main"> 
        <h4>Function Information</h4>
      </div>
    </div>
    <blockquote> 
      <div id="page"> 
        <div id="main">Minimum DLL Version: PIEHid32.dll<br>
          Header: PIEHid32.h<br>
          Import Library: PIEHid32.lib</div>
      </div>
    </blockquote>
    <!-- InstanceEndEditable --> <a class="backtotop" href="#top">Back to top</a><a href="index.htm"> 
    </a></div>
  <!-- end of "main" --> 
  <div id="footer"> 
    <p>&copy; Copyright 2018&emsp;|&emsp;<a href="http://www.piengineering.com" rel="external" target="_blank">P.I. Engineering, Inc.</a>&emsp;|&emsp;Select Rights Reserved</p>
  </div>
  <!-- end of "footer" --> </div>
<!-- end of "page" -->
  </body>
<!-- InstanceEnd --></html>